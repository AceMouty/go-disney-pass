// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: parentposts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createParentPost = `-- name: CreateParentPost :one
INSERT INTO parent_posts(
  user_id
  ,parent_id
  ,area_id
  ,ride_id
  ,is_open
  ,ride_time
  ,number_of_kids
)
VALUES
  ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, parent_id, area_id, ride_id, is_open, ride_time, created_at, updated_at, number_of_kids
`

type CreateParentPostParams struct {
	UserID       uuid.UUID
	ParentID     uuid.NullUUID
	AreaID       sql.NullInt32
	RideID       sql.NullInt32
	IsOpen       bool
	RideTime     time.Time
	NumberOfKids int32
}

func (q *Queries) CreateParentPost(ctx context.Context, arg CreateParentPostParams) (ParentPost, error) {
	row := q.db.QueryRowContext(ctx, createParentPost,
		arg.UserID,
		arg.ParentID,
		arg.AreaID,
		arg.RideID,
		arg.IsOpen,
		arg.RideTime,
		arg.NumberOfKids,
	)
	var i ParentPost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ParentID,
		&i.AreaID,
		&i.RideID,
		&i.IsOpen,
		&i.RideTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NumberOfKids,
	)
	return i, err
}

const getAllParentPosts = `-- name: GetAllParentPosts :many
SELECT 
pp.id
,u1.username as username
,u2.username as parentname
,pa.name as park_area_name
,ar.ride_name
,pp.is_open
,pp.ride_time
,pp.number_of_kids
FROM parent_posts as pp
JOIN users as u1 ON u1.user_id = pp.user_id
JOIN users as u2 ON u2.parent_id = pp.parent_id
JOIN park_areas as pa ON pa.id = pp.area_id
JOIN area_rides as ar ON ar.id = pp.ride_id
`

type GetAllParentPostsRow struct {
	ID           int32
	Username     string
	Parentname   string
	ParkAreaName string
	RideName     string
	IsOpen       bool
	RideTime     time.Time
	NumberOfKids int32
}

func (q *Queries) GetAllParentPosts(ctx context.Context) ([]GetAllParentPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllParentPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllParentPostsRow
	for rows.Next() {
		var i GetAllParentPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Parentname,
			&i.ParkAreaName,
			&i.RideName,
			&i.IsOpen,
			&i.RideTime,
			&i.NumberOfKids,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParentPostById = `-- name: GetParentPostById :one
SELECT 
pp.id
,u1.username as username
,u2.username as parentname
,pa.name as park_area_name
,ar.ride_name
,pp.is_open
,pp.ride_time
,pp.number_of_kids
FROM parent_posts as pp
JOIN users as u1 ON u1.user_id = pp.user_id
JOIN users as u2 ON u2.parent_id = pp.parent_id
JOIN park_areas as pa ON pa.id = pp.area_id
JOIN area_rides as ar ON ar.id = pp.ride_id
WHERE pp.id = $1
`

type GetParentPostByIdRow struct {
	ID           int32
	Username     string
	Parentname   string
	ParkAreaName string
	RideName     string
	IsOpen       bool
	RideTime     time.Time
	NumberOfKids int32
}

func (q *Queries) GetParentPostById(ctx context.Context, id int32) (GetParentPostByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getParentPostById, id)
	var i GetParentPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Parentname,
		&i.ParkAreaName,
		&i.RideName,
		&i.IsOpen,
		&i.RideTime,
		&i.NumberOfKids,
	)
	return i, err
}
